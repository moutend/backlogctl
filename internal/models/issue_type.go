// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IssueType is an object representing the database table.
type IssueType struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProjectID    int64     `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Color        string    `boil:"color" json:"color" toml:"color" yaml:"color"`
	DisplayOrder int64     `boil:"display_order" json:"display_order" toml:"display_order" yaml:"display_order"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *issueTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L issueTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IssueTypeColumns = struct {
	ID           string
	ProjectID    string
	Name         string
	Color        string
	DisplayOrder string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	ProjectID:    "project_id",
	Name:         "name",
	Color:        "color",
	DisplayOrder: "display_order",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

// Generated where

var IssueTypeWhere = struct {
	ID           whereHelperint64
	ProjectID    whereHelperint64
	Name         whereHelperstring
	Color        whereHelperstring
	DisplayOrder whereHelperint64
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint64{field: "\"issue_type\".\"id\""},
	ProjectID:    whereHelperint64{field: "\"issue_type\".\"project_id\""},
	Name:         whereHelperstring{field: "\"issue_type\".\"name\""},
	Color:        whereHelperstring{field: "\"issue_type\".\"color\""},
	DisplayOrder: whereHelperint64{field: "\"issue_type\".\"display_order\""},
	CreatedAt:    whereHelpertime_Time{field: "\"issue_type\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"issue_type\".\"updated_at\""},
}

// IssueTypeRels is where relationship names are stored.
var IssueTypeRels = struct {
}{}

// issueTypeR is where relationships are stored.
type issueTypeR struct {
}

// NewStruct creates a new relationship struct
func (*issueTypeR) NewStruct() *issueTypeR {
	return &issueTypeR{}
}

// issueTypeL is where Load methods for each relationship are stored.
type issueTypeL struct{}

var (
	issueTypeAllColumns            = []string{"id", "project_id", "name", "color", "display_order", "created_at", "updated_at"}
	issueTypeColumnsWithoutDefault = []string{"project_id", "name", "color", "display_order", "created_at", "updated_at"}
	issueTypeColumnsWithDefault    = []string{"id"}
	issueTypePrimaryKeyColumns     = []string{"id"}
)

type (
	// IssueTypeSlice is an alias for a slice of pointers to IssueType.
	// This should generally be used opposed to []IssueType.
	IssueTypeSlice []*IssueType
	// IssueTypeHook is the signature for custom IssueType hook methods
	IssueTypeHook func(context.Context, boil.ContextExecutor, *IssueType) error

	issueTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	issueTypeType                 = reflect.TypeOf(&IssueType{})
	issueTypeMapping              = queries.MakeStructMapping(issueTypeType)
	issueTypePrimaryKeyMapping, _ = queries.BindMapping(issueTypeType, issueTypeMapping, issueTypePrimaryKeyColumns)
	issueTypeInsertCacheMut       sync.RWMutex
	issueTypeInsertCache          = make(map[string]insertCache)
	issueTypeUpdateCacheMut       sync.RWMutex
	issueTypeUpdateCache          = make(map[string]updateCache)
	issueTypeUpsertCacheMut       sync.RWMutex
	issueTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var issueTypeBeforeInsertHooks []IssueTypeHook
var issueTypeBeforeUpdateHooks []IssueTypeHook
var issueTypeBeforeDeleteHooks []IssueTypeHook
var issueTypeBeforeUpsertHooks []IssueTypeHook

var issueTypeAfterInsertHooks []IssueTypeHook
var issueTypeAfterSelectHooks []IssueTypeHook
var issueTypeAfterUpdateHooks []IssueTypeHook
var issueTypeAfterDeleteHooks []IssueTypeHook
var issueTypeAfterUpsertHooks []IssueTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IssueType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range issueTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IssueType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range issueTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IssueType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range issueTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IssueType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range issueTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IssueType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range issueTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IssueType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range issueTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IssueType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range issueTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IssueType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range issueTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IssueType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range issueTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIssueTypeHook registers your hook function for all future operations.
func AddIssueTypeHook(hookPoint boil.HookPoint, issueTypeHook IssueTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		issueTypeBeforeInsertHooks = append(issueTypeBeforeInsertHooks, issueTypeHook)
	case boil.BeforeUpdateHook:
		issueTypeBeforeUpdateHooks = append(issueTypeBeforeUpdateHooks, issueTypeHook)
	case boil.BeforeDeleteHook:
		issueTypeBeforeDeleteHooks = append(issueTypeBeforeDeleteHooks, issueTypeHook)
	case boil.BeforeUpsertHook:
		issueTypeBeforeUpsertHooks = append(issueTypeBeforeUpsertHooks, issueTypeHook)
	case boil.AfterInsertHook:
		issueTypeAfterInsertHooks = append(issueTypeAfterInsertHooks, issueTypeHook)
	case boil.AfterSelectHook:
		issueTypeAfterSelectHooks = append(issueTypeAfterSelectHooks, issueTypeHook)
	case boil.AfterUpdateHook:
		issueTypeAfterUpdateHooks = append(issueTypeAfterUpdateHooks, issueTypeHook)
	case boil.AfterDeleteHook:
		issueTypeAfterDeleteHooks = append(issueTypeAfterDeleteHooks, issueTypeHook)
	case boil.AfterUpsertHook:
		issueTypeAfterUpsertHooks = append(issueTypeAfterUpsertHooks, issueTypeHook)
	}
}

// One returns a single issueType record from the query.
func (q issueTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IssueType, error) {
	o := &IssueType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for issue_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IssueType records from the query.
func (q issueTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (IssueTypeSlice, error) {
	var o []*IssueType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IssueType slice")
	}

	if len(issueTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IssueType records in the query.
func (q issueTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count issue_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q issueTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if issue_type exists")
	}

	return count > 0, nil
}

// IssueTypes retrieves all the records using an executor.
func IssueTypes(mods ...qm.QueryMod) issueTypeQuery {
	mods = append(mods, qm.From("\"issue_type\""))
	return issueTypeQuery{NewQuery(mods...)}
}

// FindIssueType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIssueType(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*IssueType, error) {
	issueTypeObj := &IssueType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"issue_type\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, issueTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from issue_type")
	}

	return issueTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IssueType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no issue_type provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(issueTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	issueTypeInsertCacheMut.RLock()
	cache, cached := issueTypeInsertCache[key]
	issueTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			issueTypeAllColumns,
			issueTypeColumnsWithDefault,
			issueTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(issueTypeType, issueTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(issueTypeType, issueTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"issue_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"issue_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"issue_type\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, issueTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into issue_type")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == issueTypeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for issue_type")
	}

CacheNoHooks:
	if !cached {
		issueTypeInsertCacheMut.Lock()
		issueTypeInsertCache[key] = cache
		issueTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IssueType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IssueType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	issueTypeUpdateCacheMut.RLock()
	cache, cached := issueTypeUpdateCache[key]
	issueTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			issueTypeAllColumns,
			issueTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update issue_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"issue_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, issueTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(issueTypeType, issueTypeMapping, append(wl, issueTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update issue_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for issue_type")
	}

	if !cached {
		issueTypeUpdateCacheMut.Lock()
		issueTypeUpdateCache[key] = cache
		issueTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q issueTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for issue_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for issue_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IssueTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), issueTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"issue_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, issueTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in issueType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all issueType")
	}
	return rowsAff, nil
}

// Delete deletes a single IssueType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IssueType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IssueType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), issueTypePrimaryKeyMapping)
	sql := "DELETE FROM \"issue_type\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from issue_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for issue_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q issueTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no issueTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from issue_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for issue_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IssueTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(issueTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), issueTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"issue_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, issueTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from issueType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for issue_type")
	}

	if len(issueTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IssueType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIssueType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IssueTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IssueTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), issueTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"issue_type\".* FROM \"issue_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, issueTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IssueTypeSlice")
	}

	*o = slice

	return nil
}

// IssueTypeExists checks if the IssueType row exists.
func IssueTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"issue_type\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if issue_type exists")
	}

	return exists, nil
}
